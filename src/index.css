/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-rotate-x: rotateX(0);
      --tw-rotate-y: rotateY(0);
      --tw-rotate-z: rotateZ(0);
      --tw-skew-x: skewX(0);
      --tw-skew-y: skewY(0);
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-outline-style: solid;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;

      /* Custom color palette */
      --color-primary: #228B22;         /* Forest Green */
      --color-dark-accent: #1C5E1C;     /* Deep Forest */
      --color-page-bg: #E8F5E9;         /* Soft Green Tint */
      --color-card-bg: #FFFFFF;         /* White */
      --color-border: #C9E7CC;          /* Light Forest Tint */
      --color-text: #2B2B2B;            /* Dark Gray */
      --color-button-hover: #1A781A;    /* Rich Green */
    }
  }
}

@layer theme {
  :root, :host {
    /* Fonts */
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;

    /* Color Palette */
    --color-primary: #228B22;         /* Forest Green */
    --color-dark-accent: #1C5E1C;     /* Deep Forest */
    --color-page-bg: #E8F5E9;         /* Soft Green Tint */
    --color-card-bg: #FFFFFF;         /* White */
    --color-border: #C9E7CC;          /* Light Forest Tint */
    --color-text: #2B2B2B;            /* Dark Gray */
    --color-button-hover: #1A781A;    /* Rich Green */

    /* Spacing & Containers */
    --spacing: .25rem;
    --container-2xl: 42rem;
    --container-4xl: 56rem;
    --container-6xl: 72rem;
    --container-7xl: 80rem;

    /* Text sizes & line-heights */
    --text-xs: .75rem;
    --text-xs--line-height: calc(1 / .75);
    --text-sm: .875rem;
    --text-sm--line-height: calc(1.25 / .875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-xl: 1.25rem;
    --text-2xl: 1.5rem;

    /* Font weights */
    --font-weight-normal: 400;
    --font-weight-medium: 500;

    /* Default transitions */
    --default-transition-duration: .15s;
    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);

    /* Default font families */
    --default-font-family: var(--font-sans);
    --default-font-feature-settings: var(--font-sans--font-feature-settings);
    --default-font-variation-settings: var(--font-sans--font-variation-settings);
    --default-mono-font-family: var(--font-mono);
    --default-mono-font-feature-settings: var(--font-mono--font-feature-settings);
    --default-mono-font-variation-settings: var(--font-mono--font-variation-settings);
  }
}

@layer base {
  *, :after, :before, ::backdrop {
    box-sizing: border-box;
    border: 0 solid var(--color-border);
    margin: 0;
    padding: 0;
  }

  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid var(--color-border);
    margin: 0;
    padding: 0;
    color: var(--color-text);
    background-color: var(--color-card-bg);
  }

  html, :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(--default-font-family);
    font-feature-settings: var(--default-font-feature-settings);
    font-variation-settings: var(--default-font-variation-settings);
    -webkit-tap-highlight-color: transparent;
    background-color: var(--color-page-bg);
    color: var(--color-text);
  }

  body {
    line-height: inherit;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
    border-color: var(--color-border);
  }

  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
    color: var(--color-dark-accent);
  }

  a {
    color: var(--color-primary);
    text-decoration: none;
    transition: color 0.15s var(--default-transition-timing-function);
  }

  a:hover {
    color: var(--color-button-hover);
  }

  b, strong {
    font-weight: bolder;
  }

  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family);
    font-feature-settings: var(--default-mono-font-feature-settings);
    font-variation-settings: var(--default-mono-font-variation-settings);
    font-size: 1em;
    color: var(--color-text);
    background-color: var(--color-card-bg);
  }

  small {
    font-size: 80%;
  }

  sub, sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub { bottom: -.25em; }
  sup { top: -.5em; }

  table {
    text-indent: 0;
    border-color: var(--color-border);
    border-collapse: collapse;
  }

  :-moz-focusring { outline: auto; }
  progress { vertical-align: baseline; }
  summary { display: list-item; }
  ol, ul, menu { list-style: none; }

  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
  }

  img, video { max-width: 100%; height: auto; }

  button, input, select, optgroup, textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: var(--color-text);
    opacity: 1;
    background-color: var(--color-card-bg);
    border-radius: 0;
    border: 1px solid var(--color-border);
    transition: background-color 0.15s var(--default-transition-timing-function), color 0.15s var(--default-transition-timing-function);
  }

  button:hover, input:hover, select:hover, textarea:hover {
    background-color: var(--color-button-hover);
    color: #fff;
  }

  ::placeholder {
    opacity: 1;
    color: var(--color-text);
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  :where(select:is([multiple], [size])) optgroup { font-weight: bolder; }
  :where(select:is([multiple], [size])) optgroup option { padding-inline-start: 20px; }
}

@supports (color: color-mix(in lab, red, red)) {
  ::placeholder {
    color: color-mix(in oklab, var(--color-text) 50%, transparent);
  }
}

textarea {
  resize: vertical;
}

::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-date-and-time-value {
  min-height: 1lh;
  text-align: inherit;
}

::-webkit-datetime-edit {
  display: inline-flex;
  padding-block: 0;
}

::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-year-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-minute-field,
::-webkit-datetime-edit-second-field,
::-webkit-datetime-edit-millisecond-field,
::-webkit-datetime-edit-meridiem-field {
  padding-block: 0;
}

:-moz-ui-invalid {
  box-shadow: none;
}

button, input:where([type="button"], [type="reset"], [type="submit"]) {
  appearance: button;
  border: 1px solid var(--color-border);
  background-color: var(--color-card-bg);
  color: var(--color-text);
  transition: background-color 0.15s var(--default-transition-timing-function), color 0.15s var(--default-transition-timing-function);
}

button:hover, input:where([type="button"], [type="reset"], [type="submit"]):hover {
  background-color: var(--color-button-hover);
  color: #fff;
}

::file-selector-button {
  appearance: button;
  border: 1px solid var(--color-border);
  background-color: var(--color-card-bg);
  color: var(--color-text);
  transition: background-color 0.15s var(--default-transition-timing-function), color 0.15s var(--default-transition-timing-function);
}

::file-selector-button:hover {
  background-color: var(--color-button-hover);
  color: #fff;
}

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

[hidden]:where(:not([hidden="until-found"])) {
  display: none !important;
}

/* Apply consistent border and outline colors */
* {
  border-color: var(--color-border);
  outline-color: var(--color-primary);
}

@supports (color: color-mix(in lab, red, red)) {
  * {
    outline-color: color-mix(in oklab, var(--color-primary) 50%, transparent);
  }
}


@supports (color: color-mix(in lab, red, red)) {
  * {
    outline-color: color-mix(in oklab, var(--color-primary) 50%, transparent);
  }
}

body {
  background-color: var(--color-page-bg);
  color: var(--color-text);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h1 {
  font-size: var(--text-2xl);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  color: var(--color-dark-accent);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h2 {
  font-size: var(--text-xl);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  color: var(--color-dark-accent);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h3 {
  font-size: var(--text-lg);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  color: var(--color-dark-accent);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) h4 {
  font-size: var(--text-base);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  color: var(--color-dark-accent);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) p {
  font-size: var(--text-base);
  font-weight: var(--font-weight-normal);
  line-height: 1.5;
  color: var(--color-text);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) label,
:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) button {
  font-size: var(--text-base);
  font-weight: var(--font-weight-medium);
  line-height: 1.5;
  color: var(--color-text);
}

:where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) input {
  font-size: var(--text-base);
  font-weight: var(--font-weight-normal);
  line-height: 1.5;
  color: var(--color-text);
}

/* Utilities */
@layer utilities {
  .\@container\/card-header { container: card-header / inline-size; }

  .absolute { position: absolute; }
  .relative { position: relative; }
  .-top-1 { top: calc(var(--spacing) * -1); }
  .-right-1 { right: calc(var(--spacing) * -1); }
  .col-start-2 { grid-column-start: 2; }
  .row-span-2 { grid-row: span 2 / span 2; }
  .row-start-1 { grid-row-start: 1; }
  .container { width: 100%; }

  @media (width >= 40rem) { .container { max-width: 40rem; } }
  @media (width >= 48rem) { .container { max-width: 48rem; } }
  @media (width >= 64rem) { .container { max-width: 64rem; } }
  @media (width >= 80rem) { .container { max-width: 80rem; } }
  @media (width >= 96rem) { .container { max-width: 96rem; } }
}
.mx-auto { margin-inline: auto; }
.mt-12 { margin-top: calc(var(--spacing) * 12); }
.mb-1 { margin-bottom: calc(var(--spacing) * 1); }
.mb-2 { margin-bottom: calc(var(--spacing) * 2); }
.mb-3 { margin-bottom: calc(var(--spacing) * 3); }
.mb-4 { margin-bottom: calc(var(--spacing) * 4); }
.mb-6 { margin-bottom: calc(var(--spacing) * 6); }
.mb-8 { margin-bottom: calc(var(--spacing) * 8); }

.flex { display: flex; }
.grid { display: grid; }
.inline-flex { display: inline-flex; }

.size-4 { width: calc(var(--spacing) * 4); height: calc(var(--spacing) * 4); }
.size-9 { width: calc(var(--spacing) * 9); height: calc(var(--spacing) * 9); }

.h-2 { height: calc(var(--spacing) * 2); }
.h-3 { height: calc(var(--spacing) * 3); }
.h-4 { height: calc(var(--spacing) * 4); }
.h-5 { height: calc(var(--spacing) * 5); }
.h-6 { height: calc(var(--spacing) * 6); }
.h-8 { height: calc(var(--spacing) * 8); }
.h-9 { height: calc(var(--spacing) * 9); }
.h-10 { height: calc(var(--spacing) * 10); }
.h-12 { height: calc(var(--spacing) * 12); }
.h-16 { height: calc(var(--spacing) * 16); }
.h-20 { height: calc(var(--spacing) * 20); }
.h-24 { height: calc(var(--spacing) * 24); }
.h-32 { height: calc(var(--spacing) * 32); }
.h-48 { height: calc(var(--spacing) * 48); }
.h-64 { height: calc(var(--spacing) * 64); }
.h-80 { height: calc(var(--spacing) * 80); }
.h-auto { height: auto; }
.h-full { height: 100%; }
.min-h-screen { min-height: 100vh; }

.w-2\/3 { width: 66.6667%; }
.w-3\/4 { width: 75%; }
.w-4 { width: calc(var(--spacing) * 4); }
.w-4\/5 { width: 80%; }
.w-5 { width: calc(var(--spacing) * 5); }
.w-8 { width: calc(var(--spacing) * 8); }
.w-10 { width: calc(var(--spacing) * 10); }
.w-12 { width: calc(var(--spacing) * 12); }
.w-16 { width: calc(var(--spacing) * 16); }
.w-20 { width: calc(var(--spacing) * 20); }

/* Optional color utility variants */
.bg-primary { background-color: var(--color-primary); }
.bg-dark-accent { background-color: var(--color-dark-accent); }
.bg-page { background-color: var(--color-page-bg); }
.bg-card { background-color: var(--color-card-bg); }

.text-primary { color: var(--color-primary); }
.text-dark-accent { color: var(--color-dark-accent); }
.text-body { color: var(--color-text); }

.border { border-color: var(--color-border); }
.w-24 { width: calc(var(--spacing) * 24); }
.w-28 { width: calc(var(--spacing) * 28); }
.w-32 { width: calc(var(--spacing) * 32); }
.w-48 { width: calc(var(--spacing) * 48); }
.w-fit { width: fit-content; }
.w-full { width: 100%; }
.w-px { width: 1px; }

.max-w-2xl { max-width: var(--container-2xl); }
.max-w-4xl { max-width: var(--container-4xl); }
.max-w-6xl { max-width: var(--container-6xl); }
.max-w-7xl { max-width: var(--container-7xl); }

.min-w-0 { min-width: calc(var(--spacing) * 0); }
.flex-1 { flex: 1; }
.shrink-0 { flex-shrink: 0; }

.transform { transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y); }
.cursor-pointer { cursor: pointer; }

.resize-none { resize: none; }
.auto-rows-min { grid-auto-rows: min-content; }

.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-rows-\[auto_auto\] { grid-template-rows: auto auto; }

.flex-col { flex-direction: column; }

/* Optional color utility classes for combining layout with theme */
.bg-primary { background-color: var(--color-primary); }
.bg-dark-accent { background-color: var(--color-dark-accent); }
.bg-page { background-color: var(--color-page-bg); }
.bg-card { background-color: var(--color-card-bg); }

.text-primary { color: var(--color-primary); }
.text-dark-accent { color: var(--color-dark-accent); }
.text-body { color: var(--color-text); }

.border { border-color: var(--color-border); }
.flex-wrap { flex-wrap: wrap; }
.items-center { align-items: center; }
.items-start { align-items: flex-start; }
.justify-between { justify-content: space-between; }
.justify-center { justify-content: center; }
.justify-end { justify-content: flex-end; }

.gap-1 { gap: calc(var(--spacing) * 1); }
.gap-1\.5 { gap: calc(var(--spacing) * 1.5); }
.gap-2 { gap: calc(var(--spacing) * 2); }
.gap-3 { gap: calc(var(--spacing) * 3); }
.gap-4 { gap: calc(var(--spacing) * 4); }
.gap-6 { gap: calc(var(--spacing) * 6); }

/* Optional color utility classes for flex/grid containers */
.bg-primary { background-color: var(--color-primary); }
.bg-dark-accent { background-color: var(--color-dark-accent); }
.bg-page { background-color: var(--color-page-bg); }
.bg-card { background-color: var(--color-card-bg); }

.text-primary { color: var(--color-primary); }
.text-dark-accent { color: var(--color-dark-accent); }
.text-body { color: var(--color-text); }

.border { border-color: var(--color-border); }

/* Space utilities (vertical & horizontal) */
:where(.space-y-1 > :not(:last-child)) {
  --tw-space-y-reverse: 0;
  margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
  margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
}
:where(.space-y-2 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-3 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-4 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-6 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 6) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-8 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse))); }

:where(.space-x-1 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 1) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-2 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-3 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 3) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-4 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 4) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-6 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 6) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-x-reverse))); }

/* Alignment & overflow */
.self-start { align-self: flex-start; }
.justify-self-end { justify-self: flex-end; }
.overflow-hidden { overflow: hidden; }

/* Border radius */
.rounded { border-radius: .25rem; }
.rounded-full { border-radius: 9999px; }
.rounded-md { border-radius: calc(var(--radius) - 2px); }
.rounded-xl { border-radius: calc(var(--radius) + 4px); }

/* Borders */
.border { border-style: var(--tw-border-style); border-width: 1px; border-color: var(--color-border); }
.border-2 { border-style: var(--tw-border-style); border-width: 2px; border-color: var(--color-border); }
.border-t { border-top-style: var(--tw-border-style); border-top-width: 1px; border-color: var(--color-border); }
.border-b { border-bottom-style: var(--tw-border-style); border-bottom-width: 1px; border-color: var(--color-border); }
.border-b-2 { border-bottom-style: var(--tw-border-style); border-bottom-width: 2px; border-color: var(--color-border); }
.border-dashed { border-style: dashed; border-color: var(--color-border); }

/* Theme-specific borders */
.border-primary { border-color: var(--color-primary); }
.border-transparent { border-color: #0000; }
/* Space utilities (vertical & horizontal) */
:where(.space-y-1 > :not(:last-child)) {
  --tw-space-y-reverse: 0;
  margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
  margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
}
:where(.space-y-2 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-3 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-4 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-6 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 6) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-y-reverse))); }
:where(.space-y-8 > :not(:last-child)) { --tw-space-y-reverse: 0; margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse)); margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse))); }

:where(.space-x-1 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 1) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-2 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-3 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 3) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-4 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 4) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-x-reverse))); }
:where(.space-x-6 > :not(:last-child)) { --tw-space-x-reverse: 0; margin-inline-start: calc(calc(var(--spacing) * 6) * var(--tw-space-x-reverse)); margin-inline-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-x-reverse))); }

/* Alignment & overflow */
.self-start { align-self: flex-start; }
.justify-self-end { justify-self: flex-end; }
.overflow-hidden { overflow: hidden; }

/* Border radius */
.rounded { border-radius: .25rem; }
.rounded-full { border-radius: 9999px; }
.rounded-md { border-radius: calc(var(--radius) - 2px); }
.rounded-xl { border-radius: calc(var(--radius) + 4px); }

/* Borders */
.border { border-style: var(--tw-border-style); border-width: 1px; border-color: var(--color-border); }
.border-2 { border-style: var(--tw-border-style); border-width: 2px; border-color: var(--color-border); }
.border-t { border-top-style: var(--tw-border-style); border-top-width: 1px; border-color: var(--color-border); }
.border-b { border-bottom-style: var(--tw-border-style); border-bottom-width: 1px; border-color: var(--color-border); }
.border-b-2 { border-bottom-style: var(--tw-border-style); border-bottom-width: 2px; border-color: var(--color-border); }
.border-dashed { border-style: dashed; border-color: var(--color-border); }

/* Theme-specific borders */
.border-primary { border-color: var(--color-primary); }
.border-transparent { border-color: #0000; }

/* Background color utilities */
.bg-background { background-color: var(--color-page-bg); }
.bg-border { background-color: var(--color-border); }
.bg-card { background-color: var(--color-card-bg); }
.bg-destructive { background-color: var(--color-destructive, #FF4D4F); } /* fallback destructive color */
.bg-gray-100 { background-color: var(--color-gray-100); }
.bg-gray-200 { background-color: var(--color-gray-200); }
.bg-gray-300 { background-color: var(--color-gray-300); }
.bg-input-background { background-color: var(--color-input, #F5F5F5); } /* fallback input bg */
.bg-primary { background-color: var(--color-primary); }

/* Transparent variant of primary for overlays */
.bg-primary\/20 { background-color: var(--color-primary); }
@supports (color: color-mix(in lab, red, red)) {
  .bg-primary\/20 {
    background-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
  }
}

.bg-secondary { background-color: var(--color-secondary, #6C757D); } /* fallback secondary */

/* Padding utilities */
.p-0 { padding: calc(var(--spacing) * 0); }
.p-2 { padding: calc(var(--spacing) * 2); }
.p-3 { padding: calc(var(--spacing) * 3); }
.p-4 { padding: calc(var(--spacing) * 4); }
.p-6 { padding: calc(var(--spacing) * 6); }
.p-8 { padding: calc(var(--spacing) * 8); }

.px-2 { padding-inline: calc(var(--spacing) * 2); }
.px-3 { padding-inline: calc(var(--spacing) * 3); }
.px-4 { padding-inline: calc(var(--spacing) * 4); }
.px-6 { padding-inline: calc(var(--spacing) * 6); }

.py-0\.5 { padding-block: calc(var(--spacing) * .5); }
.py-1 { padding-block: calc(var(--spacing) * 1); }
.py-2 { padding-block: calc(var(--spacing) * 2); }
.py-8 { padding-block: calc(var(--spacing) * 8); }

.pt-2 { padding-top: calc(var(--spacing) * 2); }
.pt-4 { padding-top: calc(var(--spacing) * 4); }
.pt-6 { padding-top: calc(var(--spacing) * 6); }

.pb-6 { padding-bottom: calc(var(--spacing) * 6); }

/* Text alignment & typography */
.text-center { text-align: center; }
.text-base { font-size: var(--text-base); line-height: var(--tw-leading, var(--text-base--line-height)); }
.text-sm { font-size: var(--text-sm); line-height: var(--tw-leading, var(--text-sm--line-height)); }
.text-xs { font-size: var(--text-xs); line-height: var(--tw-leading, var(--text-xs--line-height)); }
.leading-none { --tw-leading: 1; line-height: 1; }
.font-medium { --tw-font-weight: var(--font-weight-medium); font-weight: var(--font-weight-medium); }
.whitespace-nowrap { white-space: nowrap; }
.capitalize { text-transform: capitalize; }
.underline-offset-4 { text-underline-offset: 4px; }
.opacity-80 { opacity: .8; }

/* Text color utilities mapped to your palette */
.text-card-foreground { color: var(--color-card-text, #2B2B2B); }
.text-foreground { color: var(--color-text, #2B2B2B); }
.text-gray-300 { color: var(--color-gray-300); }
.text-gray-400 { color: var(--color-gray-400); }
.text-green-500 { color: var(--color-primary); } /* your brand green */
.text-muted-foreground { color: var(--color-muted, #6C757D); }
.text-primary { color: var(--color-primary); }
.text-primary-foreground { color: var(--color-card-text, #2B2B2B); }
.text-secondary-foreground { color: var(--color-dark-accent); }
.text-white { color: var(--color-white); }
.text-black { color: #030213; } /* deep black variant */

/* Outline & transition utilities */
.outline { outline-style: var(--tw-outline-style); outline-width: 1px; }
.transition-\[color\,box-shadow\] {
  transition-property: color, box-shadow;
  transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
  transition-duration: var(--tw-duration, var(--default-transition-duration));
}
.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
  transition-duration: var(--tw-duration, var(--default-transition-duration));
}
/* Outline & selection utilities */
.outline-none { --tw-outline-style: none; outline-style: none; }

/* Text selection styling */
.selection\:bg-primary ::selection,
.selection\:bg-primary::selection {
  background-color: var(--color-primary);
}

.selection\:text-primary-foreground ::selection,
.selection\:text-primary-foreground::selection {
  color: var(--color-card-text, #2B2B2B);
}

/* File input button utilities */
.file\:inline-flex::file-selector-button { display: inline-flex; }
.file\:h-7::file-selector-button { height: calc(var(--spacing) * 7); }
.file\:border-0::file-selector-button { border-style: var(--tw-border-style); border-width: 0; }
.file\:bg-transparent::file-selector-button { background-color: #0000; }
.file\:text-sm::file-selector-button { font-size: var(--text-sm); line-height: var(--tw-leading, var(--text-sm--line-height)); }
.file\:font-medium::file-selector-button { --tw-font-weight: var(--font-weight-medium); font-weight: var(--font-weight-medium); }
.file\:text-foreground::file-selector-button { color: var(--color-text, #2B2B2B); }

/* Placeholder color */
.placeholder\:text-muted-foreground::placeholder {
  color: var(--color-muted, #6C757D);
}

/* Hover utilities */
@media (hover: hover) {
  .hover\:bg-accent:hover { background-color: var(--color-dark-accent); }
  .hover\:bg-destructive\/90:hover { 
    background-color: #FF4D4F; 
  }
  @supports (color: color-mix(in lab, red, red)) {
    .hover\:bg-destructive\/90:hover {
      background-color: color-mix(in oklab, #FF4D4F 90%, transparent);
    }
  }
  .hover\:bg-gray-50:hover { background-color: var(--color-gray-50); }
  .hover\:bg-primary\/90:hover { background-color: var(--color-primary); }
  @supports (color: color-mix(in lab, red, red)) {
    .hover\:bg-primary\/90:hover {
      background-color: color-mix(in oklab, var(--color-primary) 90%, transparent);
    }
  }
  .hover\:bg-secondary\/80:hover { background-color: var(--color-dark-accent); }
  @supports (color: color-mix(in lab, red, red)) {
    .hover\:bg-secondary\/80:hover {
      background-color: color-mix(in oklab, var(--color-dark-accent) 80%, transparent);
    }
  }
  .hover\:text-accent-foreground:hover { color: var(--color-dark-accent); }
  .hover\:underline:hover { text-decoration-line: underline; }
}

/* Focus-visible utilities */
.focus-visible\:border-ring:focus-visible { border-color: var(--color-primary); }

.focus-visible\:ring-\[3px\]:focus-visible {
  --tw-ring-shadow: var(--tw-ring-inset, ) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
}

.focus-visible\:ring-destructive\/20:focus-visible {
  --tw-ring-color: #FF4D4F; /* destructive fallback */
}
/* Focus-visible ring utilities with color-mix support */
@supports (color: color-mix(in lab, red, red)) {
  .focus-visible\:ring-destructive\/20:focus-visible {
    --tw-ring-color: color-mix(in oklab, #FF4D4F 20%, transparent); /* destructive updated */
  }

  .aria-invalid\:ring-destructive\/20[aria-invalid="true"] {
    --tw-ring-color: color-mix(in oklab, #FF4D4F 20%, transparent);
  }

  .focus-visible\:ring-ring\/50:focus-visible {
    --tw-ring-color: color-mix(in oklab, var(--color-primary) 50%, transparent);
  }
}

/* Disabled state utilities */
.disabled\:pointer-events-none:disabled { pointer-events: none; }
.disabled\:cursor-not-allowed:disabled { cursor: not-allowed; }
.disabled\:opacity-50:disabled { opacity: .5; }

/* Card & SVG utilities */
.has-data-\[slot\=card-action\]\:grid-cols-\[1fr_auto\]:has([data-slot="card-action"]) {
  grid-template-columns: 1fr auto;
}

.has-\[\>svg\]\:px-2\.5:has( > svg) { padding-inline: calc(var(--spacing) * 2.5); }
.has-\[\>svg\]\:px-3:has( > svg) { padding-inline: calc(var(--spacing) * 3); }
.has-\[\>svg\]\:px-4:has( > svg) { padding-inline: calc(var(--spacing) * 4); }

/* ARIA invalid state for form inputs */
.aria-invalid\:border-destructive[aria-invalid="true"] { border-color: #FF4D4F; }

/* Responsive grid & typography utilities */
@media (width >= 48rem) {
  .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .md\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  .md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
  .md\:text-sm { font-size: var(--text-sm); line-height: var(--tw-leading, var(--text-sm--line-height)); }
}

@media (width >= 64rem) {
  .lg\:col-span-1 { grid-column: span 1 / span 1; }
  .lg\:col-span-2 { grid-column: span 2 / span 2; }
  .lg\:col-span-3 { grid-column: span 3 / span 3; }
  .lg\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  .lg\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
}

/* Dark mode border & background utilities */
.dark\:border-input:is(.dark *) { border-color: var(--input); }

.dark\:bg-destructive\/60:is(.dark *) { background-color: #FF4D4F; } /* destructive red */
@supports (color: color-mix(in lab, red, red)) {
  .dark\:bg-destructive\/60:is(.dark *) {
    background-color: color-mix(in oklab, #FF4D4F 60%, transparent);
  }
}

.dark\:bg-input\/30:is(.dark *) { background-color: var(--input); }
@supports (color: color-mix(in lab, red, red)) {
  .dark\:bg-input\/30:is(.dark *) {
    background-color: color-mix(in oklab, var(--input) 30%, transparent);
  }
}

/* Dark mode hover utilities */
@media (hover: hover) {
  .dark\:hover\:bg-accent\/50:is(.dark *):hover { background-color: var(--accent); }
  @supports (color: color-mix(in lab, red, red)) {
    .dark\:hover\:bg-accent\/50:is(.dark *):hover {
      background-color: color-mix(in oklab, var(--accent) 50%, transparent);
    }
  }

  .dark\:hover\:bg-input\/50:is(.dark *):hover { background-color: var(--input); }
  @supports (color: color-mix(in lab, red, red)) {
    .dark\:hover\:bg-input\/50:is(.dark *):hover {
      background-color: color-mix(in oklab, var(--input) 50%, transparent);
    }
  }
}

/* Dark mode focus-visible & invalid utilities */
.dark\:focus-visible\:ring-destructive\/40:is(.dark *):focus-visible { --tw-ring-color: #FF4D4F; }
@supports (color: color-mix(in lab, red, red)) {
  .dark\:focus-visible\:ring-destructive\/40:is(.dark *):focus-visible {
    --tw-ring-color: color-mix(in oklab, #FF4D4F 40%, transparent);
  }
}

.dark\:aria-invalid\:ring-destructive\/40:is(.dark *)[aria-invalid="true"] { --tw-ring-color: #FF4D4F; }
@supports (color: color-mix(in lab, red, red)) {
  .dark\:aria-invalid\:ring-destructive\/40:is(.dark *)[aria-invalid="true"] {
    --tw-ring-color: color-mix(in oklab, #FF4D4F 40%, transparent);
  }
}

/* SVG utilities */
.[&_svg]\:pointer-events-none svg { pointer-events: none; }
.[&_svg]\:shrink-0 svg { flex-shrink: 0; }
.[&_svg\:not([class*='size-'])]\:size-4 svg:not([class*="size-"]) {
  width: calc(var(--spacing) * 4);
  height: calc(var(--spacing) * 4);
}

/* Padding utilities for specific border elements */
[\.border-b]\:pb-6.border-b { padding-bottom: calc(var(--spacing) * 6); }
[\.border-t]\:pt-6.border-t { padding-top: calc(var(--spacing) * 6); }
[&:last-child]\:pb-6:last-child { padding-bottom: calc(var(--spacing) * 6); }

/* More SVG utilities */
[&>svg]\:pointer-events-none > svg { pointer-events: none; }
[&>svg]\:size-3 > svg {
  width: calc(var(--spacing) * 3);
  height: calc(var(--spacing) * 3);
}

/* Dark mode anchor hover utility */
@media (hover: hover) {
  a.[a&]\:hover\:bg-accent:hover { background-color: var(--accent); }
}
/* Anchor hover utilities */
@media (hover: hover) {
  a.[a&]\:hover\:bg-destructive\/90:hover {
    background-color: var(--destructive);
  }
  @supports (color: color-mix(in lab, red, red)) {
    a.[a&]\:hover\:bg-destructive\/90:hover {
      background-color: color-mix(in oklab, var(--destructive) 90%, transparent);
    }
  }

  a.[a&]\:hover\:bg-primary\/90:hover {
    background-color: var(--primary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    a.[a&]\:hover\:bg-primary\/90:hover {
      background-color: color-mix(in oklab, var(--primary) 90%, transparent);
    }
  }

  a.[a&]\:hover\:bg-secondary\/90:hover {
    background-color: var(--secondary);
  }
  @supports (color: color-mix(in lab, red, red)) {
    a.[a&]\:hover\:bg-secondary\/90:hover {
      background-color: color-mix(in oklab, var(--secondary) 90%, transparent);
    }
  }

  a.[a&]\:hover\:text-accent-foreground:hover {
    color: var(--accent-foreground);
  }
}
:root {
  --font-size: 16px;
  --background: #fff;
  --foreground: oklch(.15 0 0);           /* Slightly brighter for readability */
  --card: #fff;
  --card-foreground: oklch(.15 0 0);
  --popover: #f9f9f9;                     /* Soft, neutral background */
  --popover-foreground: oklch(.15 0 0);
  --primary: #030213;                      /* Main brand color */
  --primary-foreground: #fff;              /* Text over primary */
  --secondary: oklch(.95 .0058 264.53);    /* Accent color */
  --secondary-foreground: #030213;
  --muted: #f3f3f5;                        /* Light gray for muted elements */
  --muted-foreground: #6f6f78;
  --accent: #e9ebef;
  --accent-foreground: #030213;
  --destructive: #d4183d;
  --destructive-foreground: #fff;
  --border: #0000001a;
  --input: transparent;
  --input-background: #f3f3f5;
  --switch-background: #cbced4;
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --ring: oklch(.7 0 0);
  --chart-1: oklch(.65 .22 41.116);
  --chart-2: oklch(.6 .12 184.704);
  --chart-3: oklch(.4 .07 227.392);
  --chart-4: oklch(.83 .19 84.429);
  --chart-5: oklch(.77 .19 70.08);
  --radius: .625rem;
  --sidebar: #fefefe;                      /* Slightly off-white */
  --sidebar-foreground: #030213;
  --sidebar-primary: #030213;
  --sidebar-primary-foreground: #fefefe;
  --sidebar-accent: #f3f3f5;
  --sidebar-accent-foreground: #030213;
  --sidebar-border: #e6e6e6;
  --sidebar-ring: oklch(.7 0 0);
}

.dark {
  --background: oklch(.15 0 0);             /* Dark background for readability */
  --foreground: #fefefe;
  --card: oklch(.145 0 0);
  --card-foreground: #fefefe;
  --popover: oklch(.145 0 0);
  --popover-foreground: #fefefe;
  --primary: #fefefe;
  --primary-foreground: #030213;
  --secondary: oklch(.27 0 0);
  --secondary-foreground: #fefefe;
  --muted: oklch(.27 0 0);
  --muted-foreground: #b0b0b0;
  --accent: oklch(.27 0 0);
  --accent-foreground: #fefefe;
  --destructive: oklch(.4 .14 25.723);
  --destructive-foreground: #fff;
  --border: oklch(.27 0 0);
  --input: oklch(.27 0 0);
  --ring: oklch(.44 0 0);
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --chart-1: oklch(.49 .24 264.38);
  --chart-2: oklch(.7 .17 162.48);
  --chart-3: oklch(.77 .19 70.08);
  --chart-4: oklch(.63 .27 303.9);
  --chart-5: oklch(.65 .25 16.44);
  --sidebar: #1a1a1a;                       /* Dark sidebar */
  --sidebar-foreground: #fefefe;
  --sidebar-primary: oklch(.49 .24 264.38);
  --sidebar-primary-foreground: #fefefe;
  --sidebar-accent: #2c2c2c;
  --sidebar-accent-foreground: #fefefe;
  --sidebar-border: #2c2c2c;
  --sidebar-ring: oklch(.44 0 0);
}

html {
  font-size: var(--font-size);
}
<--/* Base font size */
/* Transform & skew properties */
@property --tw-rotate-x { syntax: "*"; inherits: false; initial-value: rotateX(0); }
@property --tw-rotate-y { syntax: "*"; inherits: false; initial-value: rotateY(0); }
@property --tw-rotate-z { syntax: "*"; inherits: false; initial-value: rotateZ(0); }
@property --tw-skew-x { syntax: "*"; inherits: false; initial-value: skewX(0); }
@property --tw-skew-y { syntax: "*"; inherits: false; initial-value: skewY(0); }

/* Spacing reverse for utilities like space-x/y */
@property --tw-space-y-reverse { syntax: "*"; inherits: false; initial-value: 0; }
@property --tw-space-x-reverse { syntax: "*"; inherits: false; initial-value: 0; }

/* Border & outline */
@property --tw-border-style { syntax: "*"; inherits: false; initial-value: solid; }
@property --tw-outline-style { syntax: "*"; inherits: false; initial-value: solid; }

/* Typography */
@property --tw-leading { syntax: "*"; inherits: false; }
@property --tw-font-weight { syntax: "*"; inherits: false; }

/* Shadows */
@property --tw-shadow { syntax: "*"; inherits: false; initial-value: 0 0 #0000; }
@property --tw-shadow-color { syntax: "*"; inherits: false; }
@property --tw-shadow-alpha { syntax: "<percentage>"; inherits: false; initial-value: 100%; }
@property --tw-inset-shadow { syntax: "*"; inherits: false; initial-value: 0 0 #0000; }
@property --tw-inset-shadow-color { syntax: "*"; inherits: false; }
@property --tw-inset-shadow-alpha { syntax: "<percentage>"; inherits: false; initial-value: 100%; }

/* Ring (focus outlines) */
@property --tw-ring-color { syntax: "*"; inherits: false; }
@property --tw-ring-shadow { syntax: "*"; inherits: false; initial-value: 0 0 #0000; }
@property --tw-inset-ring-color { syntax: "*"; inherits: false; }
@property --tw-inset-ring-shadow { syntax: "*"; inherits: false; initial-value: 0 0 #0000; }
@property --tw-ring-inset { syntax: "*"; inherits: false; }
@property --tw-ring-offset-width { syntax: "<length>"; inherits: false; initial-value: 0; }
@property --tw-ring-offset-color { syntax: "*"; inherits: false; initial-value: var(--background); }
@property --tw-ring-offset-shadow { syntax: "*"; inherits: false; initial-value: 0 0 #0000; }

 
 
